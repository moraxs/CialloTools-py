name: Build and Release

permissions:
  actions: write
  contents: write
 
  deployments: write

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pywebview pyinstaller

    - name: Build project
      run: |
       pyinstaller --onefile --windowed --add-data "dist;dist" --icon="dist/favicon.ico" main.py

    - name: Upload Build Artifact
      uses: actions/upload-artifact@v3
      with:
        name: build-artifact
        path: dist/CialloTools.exe  

    - name: Create Release
      id: create_release
      uses: gh-actions/create-release@v1
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Automated release for version ${{ github.run_number }}.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Release Asset
      uses: gh-actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/CialloTools.exe  
        asset_name: CialloTools.exe
        asset_content_type: application/octet-stream
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Cleanup old artifacts
      uses: actions/github-script@v3
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const runId = process.env.GITHUB_RUN_ID;
          const artifacts = await github.actions.listArtifactsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          for (const artifact of artifacts.data.artifacts) {
            if (artifact.workflow_run.id.toString() !== runId) {
              await github.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
              });
            }
          }
